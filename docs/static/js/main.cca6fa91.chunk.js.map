{"version":3,"sources":["twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","currentNetwork","setCurrentNetwork","loading","setLoading","checkIfWalletIsConnected","a","window","ethereum","console","log","provider","ethers","providers","Web3Provider","getNetwork","chainId","network","alert","request","method","accounts","length","account","setupEventListener","connectWallet","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMint","connectedContract","makeAnEpicNFT","gasLimit","nftTxn","wait","hash","useEffect","location","reload","className","onClick","disabled","style","cursor","background","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cca6fa91.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport twitterLogo from \"./twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./library/MyEpicNFT.sol/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x63eE7f5AE315Bf19150cf471656d2709148F8F27\";\n//\"0x1498ce0a380a734e35a8bcb1a7b41bfb971a2729\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentNetwork, setCurrentNetwork] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const network = await (await provider.getNetwork()).chainId;\n      setCurrentNetwork(network);\n      if (network !== 4) {\n        alert(`Please connect to the Rinkeby test network to mint NFTs`);\n      }\n      console.log(`We have the ethereum object ${ethereum}`);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(`We have the account: ${account}`);\n      setCurrentAccount(account);\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(`connected ${accounts[0]}`);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        console.log(\"Event listener setup\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMint = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT({\n          gasLimit: 2000000,\n        });\n        console.log(\"Mining...please wait.\");\n        setLoading(true);\n        await nftTxn.wait();\n        setLoading(false);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n      alert(\"Transaction Failed\");\n    }\n  };\n\n  // This runs our function when the page loads\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n  }, []);\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMint}\n      className=\"cta-button connect-wallet-button\"\n      disabled={loading}\n      style={{\n        cursor: loading ? \"wait\" : \"pointer\",\n        background: loading\n          ? \"-webkit-linear-gradient(left, #a200d6, #ff6fdf)\"\n          : \"\",\n      }}\n    >\n      Mint NFT\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : currentNetwork === 4 ? (\n            renderMintUI()\n          ) : (\n            <p className=\"sub-text\">Need to be on Rinkeby to mint</p>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}